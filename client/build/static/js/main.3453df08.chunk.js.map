{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/FloatingButton.js","components/CreateEditAccountDialog.js","components/ResetPasswordDialog.js","components/LoginPage.js","components/FeedPage.js","components/ConfirmDeleteBox.js","components/RoundsTable.js","components/RoundForm.js","components/Rounds.js","components/CoursesPage.js","components/AboutBox.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","logRound","profilePicURL","displayName","account","showAbout","logOut","ModeBar","FloatingButton","handleClick","CreateEditAccountDialog","checkAccountValidity","state","accountPassword","accountPasswordRepeat","repeatPassRef","current","setCustomValidity","handleNewAccountChange","event","target","name","value","length","setState","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","setDefaultDisplayName","handleCreateAccount","a","preventDefault","url","accountName","accountInfo","password","securityQuestion","accountSecurityQuestion","securityAnswer","accountSecurityAnswer","fetch","headers","method","body","JSON","stringify","res","status","accountCreateStatus","text","resText","newUserRef","createRef","role","cancelCreateAccount","onSubmit","type","size","placeholder","pattern","required","ref","onChange","onBlur","accept","profilePic","rows","cols","maxLength","ResetPasswordDialog","showResetPasswordDialog","handleLookAccount","AccountEmailRef","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","loginMsg","msg","accountCreateMsg","showCreateAccountDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","githubIcon","githubLabel","googleIcon","googleLabel","focus","htmlFor","style","padding","fontSize","FeedPage","fontStyle","ConfirmDeleteBox","close","deleteRound","RoundsTable","editRound","setEditId","confirmDelete","setDeleteId","showConfirmDelete","hideConfirmDeleteBox","renderTable","table","r","push","key","rounds","date","substring","course","Number","strokes","minutes","seconds","keys","colSpan","RoundForm","handleChange","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","handleSubmit","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","Matchup","week","Points","thisRound","startData","max","disabled","notes","Rounds","addRound","newData","userObj","alert","refreshOnUpdate","editId","_id","deleteUser","deleteId","val","icon","CoursesPage","AboutBox","hideAbout","modeTitle","modeToPage","App","newMode","response","json","obj","parse","handleChangeMode","toggleAbout","prevState","openMenu","closeMenu","setUserId","Id","userId","editAccount","editAccountCancel","editaAccount","editAccountSuccess","closeEditAccount","toggleEditAccount","authenticated","mode1","then","isAuthenticated","user","ModePage","hideEdit","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3453df08.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n    FEED: \"FeedMode\",\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n    COURSES: \"CoursesMode\"\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n    \r\n  render() {\r\n    return (\r\n    <div className=\"navbar\">  \r\n    <span className=\"navbar-items\">\r\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img src=\"https://image.shutterstock.com/image-vector/fantasy-football-logo-600w-1129431107.jpg\" alt=\"Speed Score Logo\" height=\"38px\"\r\n      width=\"38px\" />\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  switch (this.props.mode) {\r\n    case AppMode.FEED:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-users\"></span>&nbsp;League Teams</a>\r\n        <a className=\"sidemenu-item \">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Team</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\" onClick={this.props.logRound} >\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Add Matchups</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Matchup</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Player Injuries</a>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Teams</a>\r\n            <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Playesr</a>\r\n        </div>\r\n      );\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          <a id=\"AcountBtn\" className=\"sidemenu-item\" onClick={this.props.account}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;Account</a>\r\n            <a id=\"aboutBtn\" className=\"sidemenu-item\"\r\n              onClick={this.props.showAbout}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\"\r\n             onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">Home Page</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-history\"></span>\r\n          <span className=\"modebar-text\">Matchups</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Team News</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","import React from 'react';\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      accountPassword: \"\",\r\n                      accountPasswordRepeat: \"\",\r\n                      accountSecurityQuestion: \"\",\r\n                      accountSecurityAnswer: \"\"};\r\n\r\n    }\r\n\r\n    //checkAccountValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We need to check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    checkAccountValidity = () => {\r\n        if (this.state.accountPassword != this.state.accountPasswordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match original password.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleNewAccountChange--Called when a field in a dialog box form changes.\r\n    handleNewAccountChange = (event) => {\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\"});\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const val = event.target.value;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL: this.result});\r\n                });\r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value},this.checkAccountValidity);\r\n        }\r\n    } \r\n\r\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultDisplayName = (event) => {\r\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n        this.setState({displayName: event.target.value});\r\n      }\r\n    }\r\n\r\n    //handleCreateAccount -- Triggered when user clicks on \"Create Account\" button.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleCreateAccount = async (event) =>{\r\n        event.preventDefault();\r\n        const url = '/users/' + this.state.accountName;\r\n        const accountInfo = {\r\n            displayName: this.state.displayName,\r\n            password: this.state.accountPassword,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.accountSecurityQuestion,\r\n            securityAnswer: this.state.accountSecurityAnswer,\r\n        };\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(accountInfo)}); \r\n        if (res.status == 200) { //successful account creation!\r\n            this.props.accountCreateStatus(\"New account created! Enter credentials to log in.\");\r\n        } else { //Unsuccessful account creation\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.accountCreateStatus(resText);\r\n        }\r\n    }\r\n\r\n    render() {\r\n    return (\r\n    <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n            <center>\r\n            <h3 className=\"modal-title\"><b>Create New Account</b></h3>\r\n            </center>\r\n            <button className=\"close\" \r\n                onClick={this.props.cancelCreateAccount}>\r\n                &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleCreateAccount}>\r\n            <label>\r\n                Email: \r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountName\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                ref={this.newUserRef}\r\n                value={this.state.accountName}\r\n                onChange={this.handleNewAccountChange}\r\n                onBlur={this.setDefaultDisplayName}\r\n                />\r\n            </label>\r\n            <label>\r\n                Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountPassword\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\r\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                required={true}\r\n                value={this.state.accountPassword}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Repeat Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountPasswordRepeat\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Repeat Password\"\r\n                required={true}\r\n                ref={this.repeatPassRef}\r\n                value={this.state.accountPasswordRepeat}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Display Name:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"displayName\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Display Name\"\r\n                required={true}\r\n                value={this.state.displayName}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Profile Picture:<br/>\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"profilePic\"\r\n                type=\"file\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\" \r\n                ref={this.profilePicRef}\r\n                value={this.state.profilePic}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n                <img src={this.state.profilePicURL} \r\n                        height=\"60\" width=\"60\" />\r\n            </label> \r\n            <label>\r\n                Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountSecurityQuestion\"\r\n                size=\"35\"\r\n                placeholder=\"Security Question\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.accountSecurityQuestion}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountSecurityAnswer\"\r\n                type=\"text\"\r\n                placeholder=\"Answer\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.accountSecurityAnswer}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <button role=\"submit\" \r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                <span className=\"fa fa-user-plus\"></span>&nbsp;Create Account\r\n            </button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    </div>\r\n    );\r\n    }\r\n    }\r\n\r\nexport default CreateEditAccountDialog;","import React from 'react';\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n          <div className=\"modal\" role=\"dialog\">\r\n          <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n                       <center>\r\n                        <h3 className=\"modal-tittle\"><b>Look up Account</b>\r\n                            <button className=\"close\"\r\n                               onClick={()=> {this.setState({showResetPasswordDialog: false})}}>\r\n                                   &times;</button>\r\n                        </h3>\r\n                        </center>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <form onSubmit={this.handleLookAccount}>\r\n                            <label>\r\n                                Account Email Address:\r\n                                <input\r\n                                className=\"form-control form-text\"\r\n                                type=\"email\"\r\n                                size=\"35\"\r\n                                placeholder=\"Enter Email Address\"\r\n                                pattern=\"[A-Za-z0-9._%+-]+@[a-Za-z0-9.-]+\\.[a-Za-z]{2,}\"\r\n                                ref={this.AccountEmailRef}\r\n                                required={true}\r\n                                />\r\n                            </label>\r\n                            <button type=\"submit\"\r\n                                className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                                    <span className=\"fa fa-search\"></span>&nbsp;Loop Up Account\r\n                                </button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n       </div>      \r\n       );\r\n    }   \r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport AppMode from \"./../AppMode.js\";\r\n\r\nclass LoginPage extends React.Component {\r\n\r\nconstructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {accountCreateMsg: \"\",\r\n                  loginBtnIcon: \"fa fa-sign-in\",\r\n                  loginBtnLabel: \"Log In\",\r\n                  showCreateAccountDialog: false,\r\n                  showResetPasswordDialog: false,\r\n                  githubIcon: \"fa fa-github\",\r\n                  githubLabel: \"Sign in with GitHub\",\r\n                  googleIcon: \"fa fa-google\",\r\n                  googleLabel: \"Sign in with Google\",\r\n                  loginMsg: \"\"\r\n                  };\r\n} \r\n    \r\n//Focus cursor in email input field when mounted\r\ncomponentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n}  \r\n\r\n//handleLogin -- Callback function that sets up initial app state upon login.\r\n//handleLogin = () => {\r\n    //Stop spinner\r\n//    this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n //                  loginBtnLabel: \"Log In\"});\r\n    //Set current user\r\n    //this.props.setUserId(this.emailInputRef.current.value);\r\n    //Trigger switch to FEED mode (default app landing page)\r\n    //this.props.changeMode(AppMode.FEED);\r\n//}\r\n\r\n\r\n//handleLoginSubmit -- Called when user clicks on login button.\r\nhandleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     loginMsg: resText});\r\n    }\r\n}\r\n\r\n  //accountCreateStatus -- Called by child CreateAccountDialog component when \r\n  //user attempted to create new account. Hide the dialog and display \r\n  //a message indicating result of the attempt.\r\n  accountCreateStatus = (msg) => {\r\n      this.setState({accountCreateMsg: msg,\r\n                     showCreateAccountDialog: false});\r\n  }\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n      this.setState({showCreateAccountDialog: false});\r\n  }\r\n\r\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n//provider\r\nhandleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`,\"_self\");\r\n}\r\n\r\n//handleOAuthLoginClick -- Called whent the user clicks on button to\r\n//authenticate via a third-party OAuth service. The name of the provider is\r\n//passed in as a parameter.\r\nhandleOAuthLoginClick = (provider) => {\r\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\r\n                  [provider + \"Label\"] : \"Connecting...\"});\r\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\r\n}\r\n\r\n\r\n  render() {\r\n    return(\r\n        <div id=\"login-mode-div\" className=\"padded-page\">\r\n        <center>\r\n            <h1 />\r\n            {this.state.accountCreateMsg != \"\" ? <p className=\"emphasis\">{this.state.accountCreateMsg}</p> : null}\r\n            {this.state.loginMsg != \"\" ? <p className=\"emphasis\">{this.state.loginMsg}</p> : null}\r\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Email:\r\n                <input\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                id=\"emailInput\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Password:\r\n                <input\r\n                ref={this.passwordInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button\r\n                type=\"submit\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n            <button type=\"button\" className=\"btn btn-link login-link\" \r\n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\r\n                Create an account</button> | \r\n                <button type=\"button\" className=\"btn btn-link login-link\"\r\n                        onClick={() => {this.setState({showResetPasswordDialog: true});}}>\r\n                Reset your password</button>\r\n            </p>  \r\n            <button type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\r\n              <span className={this.state.githubIcon}></span>&nbsp;\r\n                {this.state.githubLabel} </button> |  \r\n                <button type=\"button\" className=\"btn btn-google\"\r\n                    onClick={() => this.handleOAuthLoginClick(\"google\")}>\r\n              <span className={this.state.googleIcon}></span>&nbsp;\r\n                {this.state.googleLabel}\r\n            </button>\r\n            <p>\r\n                <i>Version CptS 489</i>\r\n            </p>\r\n            </form>\r\n            {this.state.showCreateAccountDialog ? \r\n              <CreateEditAccountDialog \r\n                accountCreateStatus={this.accountCreateStatus}\r\n                cancelCreateAccount={this.cancelCreateAccount} /> : null}\r\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n        </center>\r\n        </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\n\r\nclass FeedPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Leauge News</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://factorydirectcraft.com/pimages/20160906095229-862068_med/small_foam_footballs_medium.jpg\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version 2.0 CptS 489 React WevDev</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default FeedPage;","import React from 'react';\r\n\r\nclass ConfirmDeleteBox extends React.Component {\r\n\r\n    //render: presents user with dialog to confirm deletion\r\n//of round. Credit: https://getbootstrap.com/docs/4.0/components/modal/\r\nrender() {\r\n    return (\r\n    <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-content\">\r\n         <div className=\"modal-header\">\r\n             <p className=\"modal-title\">Confirm Round Deletion</p>\r\n                <button id=\"modalClose\" className=\"close\" \r\n                 onClick={this.props.close}>\r\n                    &times;</button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n            <h4>Are you sure that you want to delete this round?</h4>\r\n            <div className=\"modal-footer\">\r\n             <button className=\"btn btn-danger\"\r\n                onClick={this.props.deleteRound}>\r\n                 Yes, delete round</button>\r\n            <button className=\"btn btn-secondary\"\r\n                onClick={this.props.close}>\r\n                 No, do not delete round</button>\r\n            </div>\r\n        </div>\r\n     </div>\r\n    </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteBox;","import React from 'react';\r\nimport ConfirmDeleteBox from './ConfirmDeleteBox.js' \r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n}\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id paam is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  //TO DO: Implement the confirmation dialog box. For now, we\r\n  //present alert box placeholder\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete: true});\r\n  }\r\n  \r\n  deleteRound = () => {\r\n    this.props.deleteRound();\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n\r\n  hideConfirmDeleteBox = () => {\r\n    this.setState({showConfirmDelete: false});\r\n  }\r\n \r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.rounds.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n      <div className=\"padded-page\">\r\n        <h1></h1>\r\n        <table className=\"table table-hover\">\r\n          <thead className=\"thead-light\">\r\n          <tr>\r\n            <th>Date</th>\r\n            <th>Matchup</th>\r\n            <th>Score</th>\r\n            <th>View/Edit...</th>\r\n            <th>Delete</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n            {Object.keys(this.props.rounds).length === 0 ? \r\n            <tr>\r\n            <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No Matchups logged</td>\r\n            </tr> : this.renderTable()\r\n            }\r\n          </tbody>\r\n        </table>\r\n        {this.state.showConfirmDelete ? \r\n            <ConfirmDeleteBox \r\n                close={this.hideConfirmDeleteBox}\r\n                deleteRound={this.deleteRound} /> : null}\r\n      </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default RoundsTable;\r\n  ","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n      Matchup: \"\",\r\n      week: \"week 1\",\r\n      Points: \"0\",\r\n      Points: 0,\r\n      minutes: 540,\r\n      seconds: \"00\",\r\n      notes: \"\",\r\n      faIcon: \"fa fa-save\",\r\n      btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                week=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Matchup:\r\n              <input name=\"Matchup\" className=\"form-control form-center\" week=\"text\"\r\n                value={this.state.Matchup} onChange={this.handleChange}\r\n                placeholder=\"Matchup Team\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          \r\n          <label>week:\r\n          <select name=\"week\" value={this.state.week} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n           <option value=\"1\">1</option>\r\n          <option value=\"2\">2</option>\r\n          <option value=\"3\">3</option>\r\n          <option value=\"4\">4</option>\r\n          <option value=\"5\">5</option>\r\n          <option value=\"6\">6</option>\r\n          <option value=\"7\">7</option>\r\n          <option value=\"8\">8</option>\r\n          <option value=\"9\">9</option>\r\n          <option value=\"10\">10</option>\r\n          <option value=\"11\">11</option>\r\n          <option value=\"12\">12</option>\r\n          <option value=\"13\">13</option>\r\n          <option value=\"14\">14</option>\r\n          <option value=\"15\">15</option>\r\n          <option value=\"16\">16</option>\r\n          <option value=\"17\">17</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <label>Points:\r\n          <input name=\"Points\" className=\"form-control form-center\" week=\"number\" \r\n            min=\"0.00\" max=\"200.00\" value={this.state.Points} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" week=\"number\" size=\"3\"\r\n            min=\"0\" max=\"540\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" week=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Current Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" week=\"text\" size=\"6\" \r\n                disabled={true} value={this.state.SGS} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button week=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.state = {deleteId: \"\",\r\n                      editId: \"\"};           \r\n    }\r\n\r\n    //componentDidMount -- After the component moutns, obtain current user's \r\n    //rounds from the server and push them into component state\r\n    // componentDidMount = async () => {\r\n    //     let url = \"/rounds/\" + this.props.userObj.id;\r\n    //     let res = await fetch(url, {method: 'GET'});\r\n    //     if (res.status != 200) {\r\n    //         let msg = await res.text();\r\n    //         alert(\"There was an error obtaining rounds data for this user: \" \r\n    //         + msg);\r\n    //         return;\r\n    //     } \r\n    //     let body = await res.json();\r\n    //     body = JSON.parse(body);\r\n    //     alert(\"in componentDidMount with GET results: \" + body);\r\n    //     this.setState({rounds: body}, this.props.changeMode(AppMode.ROUNDS));\r\n    // }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            alert(\"An error occurred when attempting to add new round to database: \"    \r\n            + msg);\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.state.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            alert(\"An error occurred when attempting to add new round to database: \" \r\n            + msg);\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async (deleteUser) => {\r\n        const url = '/rounds/' + this.props.userObj.id+ '/' + \r\n        this.props.userObj.rounds[this.state.deleteId]._id;\r\n        const res = await fetch(url, {\r\n              headers: {\r\n                 'Accept': 'application/json',\r\n                 'Content-Type': 'application/json'\r\n               },\r\n            method: 'DELETE',\r\n            body: JSON.stringify(deleteUser)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n             alert(\"An error occurred when attempting to add new round to database: \" \r\n            + msg);\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.setState({deleteId: val});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.setState({editId: val});\r\n    }\r\n    \r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.state.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Teams</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://factorydirectcraft.com/pimages/20160906095229-862068_med/small_foam_footballs_medium.jpg\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version 2.0 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default CoursesPage;","import React from 'react';\r\n\r\nclass AboutBox extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n          <div className=\"modal\" role=\"dialog\">\r\n          <div className=\"modal-content\">\r\n           <div className=\"modal-header\">\r\n               <p className=\"modal-title\">About Fantasy Football Scores</p>\r\n                  <button id=\"modalClose\" className=\"close\" \r\n                   onClick={this.props.hideAbout}>\r\n                      &times;</button>\r\n          </div>\r\n          <div className=\"modal-body\">\r\n            <center>\r\n            <img src=\"https://factorydirectcraft.com/pimages/20160906095229-862068_med/small_foam_footballs_medium.jpg\" height=\"200\" width=\"200\"/>\r\n              <h4>Fantasy Football Scores</h4>\r\n              <p>Version 2.0 &copy; 2020 Carlos Martinez WebApp For Fantasy Football Scores.\r\n             </p>\r\n\r\n              </center>\r\n              <div className=\"modal-footer\">\r\n              <button className=\"btn btn-secondary\"\r\n                 onClick={this.props.hideAbout}>\r\n                   OK</button>\r\n              </div>\r\n          </div>\r\n       </div>\r\n      </div>\r\n      \r\n       );\r\n    }   \r\n}\r\n\r\nexport default AboutBox;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport FloatingButton from './FloatingButton.js';\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport FeedPage from './FeedPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CoursesPage.js';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\r\nimport AboutBox from './AboutBox.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"Welcome to Fantasy Football Scores\";\r\nmodeTitle[AppMode.FEED] = \"Home Page Fantasy Football Scores\";\r\nmodeTitle[AppMode.ROUNDS] = \"SCOREBOARD\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \" Create New matchup\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Matchup\";\r\nmodeTitle[AppMode.COURSES] = \"Teams info\";\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.FEED] = FeedPage;\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\r\n                  mode1: AppMode.ROUNDS,\r\n                  userId: \"\",\r\n                  showAbout: false,\r\n                  editAccount: false,\r\n                  editAccountSuccess: false\r\n                 };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.FEED //We're authenticated so can get into the app.\r\n            });\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async(newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n  }\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n  toggleAbout = () => {\r\n    this.setState(prevState => ({showAbout: !prevState.showAbout}));\r\n  }\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id});\r\n  }\r\n  \r\n  editAccount = () => {\r\n    this.setState({editAccount:true});\r\n  }\r\n  editAccountCancel = () => {\r\n    this.setState({editaAccount: false});\r\n  }\r\n  editAccountSuccess = () => {\r\n    this.setState({editAccount: false,\r\n                  editAccountSuccess:true});\r\n  }\r\n  closeEditAccount = () => {\r\n    this.setState({editAccountSuccess: false});\r\n  }\r\n  toggleEditAccount = () => {\r\n    this.setState(prevState => ({editAccount: !prevState.editAccount}));\r\n  }\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div>\r\n         {this.state.showAbout ? <AboutBox hideAbout={this.toggleAbout}/> : null}\r\n        {this.state.editAccount ? <CreateEditAccountDialog hideEdit={this.toggleEditAccount}/> : null}\r\n        <NavBar \r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>\r\n          <SideMenu \r\n            menuOpen = {this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            toggleMenuOpen={this.toggleMenuOpen}\r\n            displayName={this.state.userObj.displayName}\r\n            profilePicURL={this.state.userObj.profilePicURL}\r\n            account={this.toggleEditAccount}\r\n            showAbout={this.toggleAbout}\r\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n            logRound={() => this.handleChangeMode(AppMode.ROUNDS_LOGROUND)}/>\r\n          <ModeBar \r\n            mode={this.state.mode} \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen={this.state.menuOpen}/>\r\n          <ModePage \r\n            menuOpen={this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            changeMode={this.handleChangeMode}\r\n            userObj={this.state.userObj}\r\n            refreshOnUpdate={this.refreshOnUpdate}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}