{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/CreateEditAccountDialog.js","components/ResetPasswordDialog.js","components/LoginPage.js","components/HomePage.js","components/AboutBox.js","components/twoFactor.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","HOMEPAGE","TWOFACTOR","Object","freeze","NavBar","getMenuBtnIcon","props","mode","ROUNDS_LOGROUND","ROUNDS_EDITROUND","menuOpen","handleMenuBtnClick","changeMode","ROUNDS","toggleMenuOpen","className","onClick","this","id","src","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","userId","showAbout","logOut","CreateEditAccountDialog","checkAccountValidity","state","accountPassword","accountPasswordRepeat","repeatPassRef","current","setCustomValidity","handleNewAccountChange","event","target","name","value","length","setState","profilePicURL","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","setDefaultDisplayName","displayName","handleCreateAccount","a","preventDefault","url","accountName","accountInfo","password","phoneNumber","accountPhoneNumber","securityQuestion","accountSecurityQuestion","securityAnswer","accountSecurityAnswer","fetch","headers","method","body","JSON","stringify","res","status","accountCreateStatus","text","resText","newUserRef","createRef","role","cancelCreateAccount","onSubmit","type","size","placeholder","pattern","required","ref","onChange","onBlur","accept","profilePic","rows","cols","maxLength","ResetPasswordDialog","showResetPasswordDialog","handleLookAccount","AccountEmailRef","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","loginMsg","msg","accountCreateMsg","showCreateAccountDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","focus","htmlFor","style","padding","fontSize","HomePage","info","alert","fontStyle","AboutBox","hideAbout","twoFactor","handleSubmitCode","console","log","SMScode","handleSendCode","handleChange","modeTitle","modeToPage","App","refreshOnUpdate","newMode","userObj","response","json","obj","parse","toggleAbout","prevState","handleChangeMode","openMenu","closeMenu","setUserId","Id","mode1","authenticated","then","isAuthenticated","user","ModePage","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cca3a232.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n    HOMEPAGE: \"HomePageMode\",\r\n    TWOFACTOR: \"SMSMode\",\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n  //The img here is for the Icon that appears on the top left corner. \r\n  render() {\r\n    return (\r\n    <div className=\"navbar\">  \r\n    <span className=\"navbar-items\">\r\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img src=\"https://canestrinilex.com/assets/Uploads/blog-pics/f613404b87/Topsecretsidebar__ScaleWidthWzcwMF0.jpg\" alt=\"Speed Score Logo\" height=\"38px\"\r\n      width=\"38px\" />\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  switch (this.props.mode) {\r\n    case AppMode.HOMEPAGE:\r\n      return(\r\n        <div>\r\n         <a className=\"sidemenu-item\" >\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Button</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.HOMEPAGE:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\" >\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Button</a>\r\n        </div>\r\n      );\r\n    break;\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n              <img src='https://media-exp1.licdn.com/dms/image/C5603AQEWMnL0q7LblQ/profile-displayphoto-shrink_200_200/0?e=1608163200&v=beta&t=11nEmz-HVGJXV1E-b-y043HwzWlR9Ey2R6WLSfgEtxg' height='50' width='50' />\r\n              <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.userId}</span>\r\n          </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\"\r\n              onClick={this.props.showAbout}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\"\r\n             onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n            \r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\n\r\nclass CreateEditAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",                      \r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      accountPassword: \"\",\r\n                      accountPasswordRepeat: \"\",\r\n                      accountPhoneNumber: \"\",//im not sure why it has to be hardCoded\r\n                      accountSecurityQuestion: \"\",\r\n                      accountSecurityAnswer: \"\"};\r\n\r\n    }\r\n\r\n    //checkAccountValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We need to check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    checkAccountValidity = () => {\r\n        if (this.state.accountPassword != this.state.accountPasswordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match original password.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleNewAccountChange--Called when a field in a dialog box form changes.\r\n    handleNewAccountChange = (event) => {\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\"});\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const val = event.target.value;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL: this.result});\r\n                });\r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value},this.checkAccountValidity);\r\n        }\r\n    } \r\n\r\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultDisplayName = (event) => {\r\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n        this.setState({displayName: event.target.value});\r\n      }\r\n    }\r\n\r\n    //handleCreateAccount -- Triggered when user clicks on \"Create Account\" button.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleCreateAccount = async (event) =>{\r\n        event.preventDefault();\r\n        const url = '/users/' + this.state.accountName;\r\n        const accountInfo = {\r\n            displayName: this.state.displayName,\r\n            password: this.state.accountPassword,\r\n            phoneNumber: this.state.accountPhoneNumber,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.accountSecurityQuestion,\r\n            securityAnswer: this.state.accountSecurityAnswer,\r\n        };\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(accountInfo)}); \r\n        if (res.status == 200) { //successful account creation!\r\n            this.props.accountCreateStatus(\"New account created! Enter credentials to log in.\");\r\n        } else { //Unsuccessful account creation\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.accountCreateStatus(resText);\r\n        }\r\n    }\r\n\r\n    render() {\r\n    return (\r\n    <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n            <center>\r\n            <h3 className=\"modal-title\"><b>Create New Account</b></h3>\r\n            </center>\r\n            <button className=\"close\" \r\n                onClick={this.props.cancelCreateAccount}>\r\n                &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleCreateAccount}>\r\n            <label>\r\n                Email: \r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountName\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                ref={this.newUserRef}\r\n                value={this.state.accountName}\r\n                onChange={this.handleNewAccountChange}\r\n                onBlur={this.setDefaultDisplayName}\r\n                />\r\n            </label>\r\n            <label>\r\n                Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountPassword\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\r\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                required={true}\r\n                value={this.state.accountPassword}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Repeat Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountPasswordRepeat\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Repeat Password\"\r\n                required={true}\r\n                ref={this.repeatPassRef}\r\n                value={this.state.accountPasswordRepeat}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Phone Number:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountPhoneNumber\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Phone Number\"\r\n                required={true}\r\n                value={this.state.accountPhoneNumber}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Display Name:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"displayName\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Display Name\"\r\n                required={true}\r\n                value={this.state.displayName}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Profile Picture:<br/>\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"profilePic\"\r\n                type=\"file\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\" \r\n                ref={this.profilePicRef}\r\n                value={this.state.profilePic}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n                <img src={this.state.profilePicURL} \r\n                        height=\"60\" width=\"60\" />\r\n            </label> \r\n            <label>\r\n                Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountSecurityQuestion\"\r\n                size=\"35\"\r\n                placeholder=\"Security Question\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.accountSecurityQuestion}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountSecurityAnswer\"\r\n                type=\"text\"\r\n                placeholder=\"Answer\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.accountSecurityAnswer}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <button role=\"submit\" \r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                <span className=\"fa fa-user-plus\"></span>&nbsp;Create Account\r\n            </button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    </div>\r\n    );\r\n    }\r\n    }\r\n\r\nexport default CreateEditAccountDialog;","import React from 'react';\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n          <div className=\"modal\" role=\"dialog\">\r\n          <div className=\"modal-content\">\r\n          <div className=\"modal-header\">\r\n                       <center>\r\n                        <h3 className=\"modal-tittle\"><b>Look up Account</b>\r\n                            <button className=\"close\"\r\n                               onClick={()=> {this.setState({showResetPasswordDialog: false})}}>\r\n                                   &times;</button>\r\n                        </h3>\r\n                        </center>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <form onSubmit={this.handleLookAccount}>\r\n                            <label>\r\n                                Account Email Address:\r\n                                <input\r\n                                className=\"form-control form-text\"\r\n                                type=\"email\"\r\n                                size=\"35\"\r\n                                placeholder=\"Enter Email Address\"\r\n                                pattern=\"[A-Za-z0-9._%+-]+@[a-Za-z0-9.-]+\\.[a-Za-z]{2,}\"\r\n                                ref={this.AccountEmailRef}\r\n                                required={true}\r\n                                />\r\n                            </label>\r\n                            <button type=\"submit\"\r\n                                className=\"btn btn-primary btn-color-theme form-submit-btn\">\r\n                                    <span className=\"fa fa-search\"></span>&nbsp;Loop Up Account\r\n                                </button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n       </div>      \r\n       );\r\n    }   \r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport CreateEditAccountDialog from './CreateEditAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport AppMode from \"./../AppMode.js\";\r\n\r\nclass LoginPage extends React.Component {\r\n\r\nconstructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {accountCreateMsg: \"\",\r\n                  loginBtnIcon: \"fa fa-sign-in\",\r\n                  loginBtnLabel: \"Log In\",\r\n                  showCreateAccountDialog: false,\r\n                  showResetPasswordDialog: false,\r\n                  loginMsg: \"\"\r\n                  };\r\n} \r\n    \r\n//Focus cursor in email input field when mounted\r\ncomponentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n}  \r\n\r\n//handleLoginSubmit -- Called when user clicks on login button.\r\nhandleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     loginMsg: resText});\r\n    }\r\n}\r\n\r\n  //accountCreateStatus -- Called by child CreateAccountDialog component when \r\n  //user attempted to create new account. Hide the dialog and display \r\n  //a message indicating result of the attempt.\r\n  accountCreateStatus = (msg) => {\r\n      this.setState({accountCreateMsg: msg,\r\n                     showCreateAccountDialog: false});\r\n  }\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n      this.setState({showCreateAccountDialog: false});\r\n  }\r\n\r\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n//provider\r\nhandleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`,\"_self\");\r\n}\r\n\r\n//handleOAuthLoginClick -- Called whent the user clicks on button to\r\n//authenticate via a third-party OAuth service. The name of the provider is\r\n//passed in as a parameter.\r\nhandleOAuthLoginClick = (provider) => {\r\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\r\n                  [provider + \"Label\"] : \"Connecting...\"});\r\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\r\n}\r\n\r\n\r\n  render() {\r\n    return(\r\n        <div id=\"login-mode-div\" className=\"padded-page\">\r\n        <center>\r\n            <h1 />\r\n            {this.state.accountCreateMsg != \"\" ? <p className=\"emphasis\">{this.state.accountCreateMsg}</p> : null}\r\n            {this.state.loginMsg != \"\" ? <p className=\"emphasis\">{this.state.loginMsg}</p> : null}\r\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Email:\r\n                <input\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                id=\"emailInput\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Password:\r\n                <input\r\n                ref={this.passwordInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button\r\n                type=\"submit\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n            <button type=\"button\" className=\"btn btn-link login-link\" \r\n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\r\n                Create an account</button> \r\n                <br />\r\n                <br />\r\n            <p>\r\n                <i>Need help signing in?</i>\r\n            </p>\r\n                <button type=\"button\" className=\"btn btn-link login-link\"\r\n                        onClick={() => {this.setState({showResetPasswordDialog: true});}}>\r\n                Reset your password</button>\r\n            </p>  \r\n            <p>\r\n            <i>Version 2.0</i>\r\n            </p>\r\n            </form>\r\n            {this.state.showCreateAccountDialog ? \r\n              <CreateEditAccountDialog \r\n                accountCreateStatus={this.accountCreateStatus}\r\n                cancelCreateAccount={this.cancelCreateAccount} /> : null}\r\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog /> : null}\r\n        </center>\r\n        </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\nimport AppMode from \"./../AppMode.js\";\r\n\r\n  /************************Dummy Data info web app***************************************************************************/\r\n  class HomePage extends React.Component {\r\n\r\n    info = () => {\r\n        alert(\"clasified\");\r\n    }\r\n    render(){\r\n        return (\r\n          <div className=\"padded-page\">\r\n          <center>\r\n          <h1 >Classified</h1>\r\n          <h2>Access to files.</h2>\r\n          <img src=\"https://canestrinilex.com/assets/Uploads/blog-pics/f613404b87/Topsecretsidebar__ScaleWidthWzcwMF0.jpg\" \r\n           height=\"200\" width=\"200\"/>\r\n          <p style={{fontStyle: \"italic\"}}>Version 1.0 Class Project CPTS_427</p>\r\n          </center>\r\n          <a id=\"logOutBtn\" className=\"logOut-Btn\"\r\n             onClick={this.props.logOut}>\r\n            <span className=\"floatbtn-icon\"></span>&nbsp;Log Out</a>\r\n      </div>\r\n\r\n        );\r\n\r\n    }\r\n  }\r\n  export default HomePage;\r\n  ","import React from 'react';\r\n\r\nclass AboutBox extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n          <div className=\"modal\" role=\"dialog\">\r\n          <div className=\"modal-content\">\r\n           <div className=\"modal-header\">\r\n               <p className=\"modal-title\">2 FA Authentication</p>\r\n                  <button id=\"modalClose\" className=\"close\" \r\n                   onClick={this.props.hideAbout}>\r\n                      &times;</button>\r\n          </div>\r\n          <div className=\"modal-body\">\r\n          <center>\r\n          <h1 >Classified</h1>\r\n          <h2>Access to files.</h2>\r\n          <img src=\"https://canestrinilex.com/assets/Uploads/blog-pics/f613404b87/Topsecretsidebar__ScaleWidthWzcwMF0.jpg\" \r\n           height=\"200\" width=\"200\"/>\r\n          <p style={{fontStyle: \"italic\"}}>Version 1.0 Class Project CPTS_427</p>\r\n          </center>\r\n              <div className=\"modal-footer\">\r\n              <button className=\"btn btn-secondary\"\r\n                 onClick={this.props.hideAbout}>\r\n                   OK</button>\r\n              </div>\r\n          </div>\r\n       </div>\r\n      </div>\r\n      \r\n                    );\r\n    }   \r\n}\r\n\r\nexport default AboutBox;","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass twoFactor extends React.Component {\r\n    constructor() {\r\n        super();\r\n        //Create a ref for the email input DOM element\r\n       this.emailInputRef = React.createRef();\r\n        this.state = {\r\n            SMScode: \"\",accountCreateMsg: \"\",\r\n            loginBtnIcon: \"fa fa-sign-in\",\r\n            loginBtnLabel: \"Log In\",\r\n            loginMsg: \"\"\r\n        }\r\n      }\r\n\r\n  /*   handleChange = (event) => {\r\n        const name = event.target.name;\r\n    \r\n        this.setState({[name]: event.target.value});\r\n    \r\n       \r\n    } \r\n    handleSubmitCode = () => {\r\n        console.log(this.state.SMScode);\r\n        \r\n    }\r\n    */\r\n    //handleLoginSubmit -- Called when user clicks on login button.\r\n    handleSubmitCode = async (event) => {\r\n    event.preventDefault();\r\n    console.log(this.state.SMScode);\r\n    /* this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     loginMsg: resText});\r\n    } */\r\n}\r\n    handleSendCode = () => {\r\n        alert(\"inside send code\");\r\n    }\r\n\r\n    //try adding the actual number where i have the number number displayed.\r\n    render() {\r\n        return(\r\n            \r\n            <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >SMS Authentication</h1>\r\n            \r\n            <img src=\"https://image.freepik.com/free-vector/2fa-icon-password-secure-login-authentication-verification-sms-push-code-messages-symbol-smartphone-mobile-phone-flat-isolated-pictogram_101884-953.jpg\" \r\n             height=\"300\" width=\"400\"/>\r\n\r\n             <h2> (+1 XXX-XXX-8181)</h2>\r\n             \r\n              <form onSubmit={this.handleSubmitCode}>\r\n            <label>\r\n                Enter Code\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"SMSCode\"\r\n                type=\"SMSCode\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Code Here\"\r\n                required={true}                \r\n                onChange={this.handleChange}\r\n                />\r\n            </label>\r\n            </form>\r\n            <button type=\"submit\" \r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\"\r\n                onClick={this.handleSendCode}>\r\n                <span className=\"fa fa-user-plus\"></span>&nbsp;Send Code\r\n            </button>\r\n            <p>option to not challenge after a given time.</p>\r\n\r\n            </center>\r\n            <a id=\"logOutBtn\" className=\"logOut-Btn\"\r\n               onClick={this.props.logOut}>\r\n              <span className=\"floatbtn-icon\"></span>&nbsp;Cancel</a>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default twoFactor;\r\n","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport HomePage from './HomePage.js';\r\nimport AboutBox from './AboutBox.js';\r\nimport twoFactor from './twoFactor.js';\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"Network Authentication\";\r\nmodeTitle[AppMode.HOMEPAGE] = \"Access Granted\";\r\nmodeTitle[AppMode.TWOFACTOR] = \"SMS Authentication\";\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.HOMEPAGE] = HomePage;\r\nmodeToPage[AppMode.TWOFACTOR] = twoFactor;\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  mode1: AppMode.TWOFACTOR,\r\n                  userId: \"\",\r\n                  showAbout: false};\r\n  }\r\n   //componentDidMount\r\n   componentDidMount() {\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({mode: AppMode.TWOFACTOR,\r\n              userObj: obj.user,\r\n              authenticated: true,});\r\n              //THIS IS WHERE I THINK I HAVE TO ADD THE 2FAC, above only redirect to 2fac then if authenticated come back and sign in\r\n           /*  if(obj.isAuthenticated){ \r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.HOMEPAGE //Username and password was authenticated so can get into SMS authentication.\r\n              //after this step i need to verify with SMS and then change mode to mode: AppMode.HOMEPAGE if authentication succesful.\r\n            });\r\n          } */\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n    //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async(newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n  }\r\n\r\n\r\n  toggleAbout = () => {\r\n    this.setState(prevState => ({showAbout: !prevState.showAbout}));\r\n  }\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id});\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div>\r\n        {this.state.showAbout ? <AboutBox hideAbout={this.toggleAbout}/> : null}\r\n        <NavBar \r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}\r\n          />\r\n          <SideMenu \r\n            menuOpen = {this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            toggleMenuOpen={this.toggleMenuOpen}\r\n            userId={this.state.userId}\r\n            showAbout={this.toggleAbout}\r\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n            />\r\n          <ModePage \r\n            menuOpen={this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            changeMode={this.handleChangeMode}\r\n            userId={this.state.userId}\r\n            setUserId={this.setUserId}\r\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}\r\n            />\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}